'use strict';

angular.module('d3', [])

//- assures d3 works onload and async
.factory('d3Serv', ['$document', '$q', '$rootScope', function ($document, $q, $rootScope) {
  var d = $q.defer();
  function onScriptLoad() {
    // Load client in the browser
    $rootScope.$apply(function () {
      d.resolve(window.d3);
    });
  }
  // Create a script tag with d3 as the source
  // and call our onScriptLoad callback when it
  // has been loaded
  var scriptTag = $document[0].createElement('script');
  scriptTag.type = 'text/javascript';
  scriptTag.async = true;
  scriptTag.src = 'http://d3js.org/d3.v3.min.js';
  scriptTag.onreadystatechange = function () {
    if (this.readyState == 'complete') onScriptLoad();
  };
  scriptTag.onload = onScriptLoad;

  var s = $document[0].getElementsByTagName('body')[0];
  s.appendChild(scriptTag);

  return {
    d3: function d3() {
      return d.promise;
    }
  };
}]);

angular.module('MapD3').directive('map', function (d3Serv) {
  return {
    restrict: 'E',
    scope: {},
    link: function link(scope, element, attrs) {
      d3Serv.d3().then(function (d3) {

        var width = 1000;
        var height = 700;

        var svg = d3.select(element[0]).append('svg').attr('width', width);
        attr('height', height);

        var projection = d3.geo.mercator().scale((width + 1) / 2 / Math.PI).translate([width / 2, height / 2]).precision(.1);

        var path = d3.geo.path().projection(projection);

        var worldMap = d3.map({});

        queue().defer(d3.json, 'mapdata/world.json').await(function (err, world) {
          var world = svg.append('g').attr('class', 'states').selectAll('g').data(topojson.feature(world, world.objects.states)).enter().append('g');

          word.append('path').attr('d', path);
        });
      });
    }

  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9kaXJlY3RpdmVzL21hcC5kaXJlY3RpdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBRU4sTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7OztDQUdoQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQy9DLFVBQVMsU0FBUyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUU7QUFDbEMsTUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25CLFdBQVMsWUFBWSxHQUFHOztBQUV0QixjQUFVLENBQUMsTUFBTSxDQUFDLFlBQVc7QUFBRSxPQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUFFLENBQUMsQ0FBQztHQUN6RDs7OztBQUlELE1BQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckQsV0FBUyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztBQUNuQyxXQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUN2QixXQUFTLENBQUMsR0FBRyxHQUFHLDhCQUE4QixDQUFDO0FBQy9DLFdBQVMsQ0FBQyxrQkFBa0IsR0FBRyxZQUFZO0FBQ3pDLFFBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUUsWUFBWSxFQUFFLENBQUM7R0FDbkQsQ0FBQTtBQUNELFdBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDOztBQUVoQyxNQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsR0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFekIsU0FBTztBQUNMLE1BQUUsRUFBRSxjQUFXO0FBQUUsYUFBTyxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQUU7R0FDckMsQ0FBQztDQUNQLENBQUMsQ0FBQyxDQUFDOztBQUVKLE9BQU8sQ0FFTixNQUFNLENBQUMsT0FBTyxDQUFDLENBRWYsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNuQyxTQUFPO0FBQ04sWUFBUSxFQUFFLEdBQUc7QUFDYixTQUFLLEVBQUUsRUFBRTtBQUNULFFBQUksRUFBRSxjQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQ3JDLFlBQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxFQUFFLEVBQUU7O0FBRTlCLFlBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixZQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7O0FBRWpCLFlBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDYixJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ3JCLFlBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUE7O0FBRXpCLFlBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQzFCLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUNoQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNsQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUE7O0FBRWxCLFlBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQ3BCLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTs7QUFFMUIsWUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUNyQixDQUFDLENBQUM7O0FBRUgsYUFBSyxFQUFFLENBQ0wsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLENBQUMsQ0FDcEMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUM1QixjQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUN6QixJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUN2QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDbkQsS0FBSyxFQUFFLENBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBOztBQUViLGNBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbEIsQ0FBQyxDQUFBO09BR0wsQ0FBQyxDQUFBO0tBR0Y7O0dBR0QsQ0FBQTtDQUtELENBQUMsQ0FBQSIsImZpbGUiOiJzcmMvanMvZGlyZWN0aXZlcy9tYXAuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuXG4ubW9kdWxlKCdkMycsIFtdKVxuXG4vLy0gYXNzdXJlcyBkMyB3b3JrcyBvbmxvYWQgYW5kIGFzeW5jXG4uZmFjdG9yeSgnZDNTZXJ2JywgWyckZG9jdW1lbnQnLCAnJHEnLCAnJHJvb3RTY29wZScsXG4gICAgZnVuY3Rpb24oJGRvY3VtZW50LCAkcSwgJHJvb3RTY29wZSkge1xuICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgZnVuY3Rpb24gb25TY3JpcHRMb2FkKCkge1xuICAgICAgICAvLyBMb2FkIGNsaWVudCBpbiB0aGUgYnJvd3NlclxuICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsgZC5yZXNvbHZlKHdpbmRvdy5kMyk7IH0pO1xuICAgICAgfVxuICAgICAgLy8gQ3JlYXRlIGEgc2NyaXB0IHRhZyB3aXRoIGQzIGFzIHRoZSBzb3VyY2VcbiAgICAgIC8vIGFuZCBjYWxsIG91ciBvblNjcmlwdExvYWQgY2FsbGJhY2sgd2hlbiBpdFxuICAgICAgLy8gaGFzIGJlZW4gbG9hZGVkXG4gICAgICB2YXIgc2NyaXB0VGFnID0gJGRvY3VtZW50WzBdLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0VGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgXG4gICAgICBzY3JpcHRUYWcuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0VGFnLnNyYyA9ICdodHRwOi8vZDNqcy5vcmcvZDMudjMubWluLmpzJztcbiAgICAgIHNjcmlwdFRhZy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykgb25TY3JpcHRMb2FkKCk7XG4gICAgICB9XG4gICAgICBzY3JpcHRUYWcub25sb2FkID0gb25TY3JpcHRMb2FkO1xuXG4gICAgICB2YXIgcyA9ICRkb2N1bWVudFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgcy5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkMzogZnVuY3Rpb24oKSB7IHJldHVybiBkLnByb21pc2U7IH1cbiAgICAgIH07XG59XSk7XG5cbmFuZ3VsYXJcblxuLm1vZHVsZSgnTWFwRDMnKVxuXG4uZGlyZWN0aXZlKCdtYXAnLCBmdW5jdGlvbiAoZDNTZXJ2KSB7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG5cdFx0XHRkM1NlcnYuZDMoKS50aGVuKGZ1bmN0aW9uKGQzKSB7XG5cblx0XHRcdHZhciB3aWR0aCA9IDEwMDA7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gNzAwO1xuXG5cdFx0XHR2YXIgc3ZnID0gZDMuc2VsZWN0KGVsZW1lbnRbMF0pXG5cdFx0XHRcdFx0XHQuYXBwZW5kKFwic3ZnXCIpXG5cdFx0XHRcdFx0XHQuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHRcdFx0XHRcdFx0YXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG5cblx0XHRcdHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvLm1lcmNhdG9yKClcblx0XHRcdCAgICBcdFx0XHQuc2NhbGUoKHdpZHRoICsgMSkgLyAyIC8gTWF0aC5QSSlcbiAgICBcdFx0XHRcdFx0XHQudHJhbnNsYXRlKFt3aWR0aCAvIDIsIGhlaWdodCAvIDJdKVxuICAgIFx0XHRcdFx0XHRcdC5wcmVjaXNpb24oLjEpXG5cbiAgICBcdFx0dmFyIHBhdGggPSBkMy5nZW8ucGF0aCgpXG4gICAgXHRcdFx0XHRcdC5wcm9qZWN0aW9uKHByb2plY3Rpb24pXG5cbiAgICBcdFx0dmFyIHdvcmxkTWFwID0gZDMubWFwKHtcbiAgICBcdFx0fSk7XG5cbiAgICBcdFx0cXVldWUoKVxuICAgIFx0XHRcdC5kZWZlcihkMy5qc29uLCAnbWFwZGF0YS93b3JsZC5qc29uJylcbiAgICBcdFx0XHQuYXdhaXQoZnVuY3Rpb24gKGVyciwgd29ybGQpIHtcbiAgICBcdFx0XHRcdHZhciB3b3JsZCA9IHN2Zy5hcHBlbmQoJ2cnKVxuXHQgICAgXHRcdFx0XHQuYXR0cihcImNsYXNzXCIsICdzdGF0ZXMnKVxuXHQgICAgXHRcdFx0XHQuc2VsZWN0QWxsKCdnJylcblx0ICAgIFx0XHRcdFx0LmRhdGEodG9wb2pzb24uZmVhdHVyZSh3b3JsZCwgd29ybGQub2JqZWN0cy5zdGF0ZXMpKVxuXHQgICAgXHRcdFx0XHQuZW50ZXIoKVxuXHQgICAgXHRcdFx0XHQuYXBwZW5kKFwiZ1wiKVxuXG5cdCAgICBcdFx0XHR3b3JkLmFwcGVuZCgncGF0aCcpXG5cdCAgICBcdFx0XHRcdC5hdHRyKCdkJywgcGF0aCk7XG4gICAgXHRcdFx0fSlcblxuXG5cdFx0XHR9KVxuXG5cblx0XHR9XG5cblxuXHR9XG5cblxuXG5cbn0pIl19
