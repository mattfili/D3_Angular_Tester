'use strict';

angular.module('d3', [])

//- assures d3 works onload and async
.factory('d3Serv', ['$document', '$q', '$rootScope', function ($document, $q, $rootScope) {
	var d = $q.defer();
	function onScriptLoad() {
		// Load client in the browser
		$rootScope.$apply(function () {
			d.resolve(window.d3);
		});
	}
	// Create a script tag with d3 as the source
	// and call our onScriptLoad callback when it
	// has been loaded
	var scriptTag = $document[0].createElement('script');
	scriptTag.type = 'text/javascript';
	scriptTag.async = true;
	scriptTag.src = 'http://d3js.org/d3.v3.min.js';
	scriptTag.onreadystatechange = function () {
		if (this.readyState == 'complete') onScriptLoad();
	};
	scriptTag.onload = onScriptLoad;

	var s = $document[0].getElementsByTagName('body')[0];
	s.appendChild(scriptTag);

	return {
		d3: function d3() {
			return d.promise;
		}
	};
}]);

angular.module('MapD3').directive('map', function (d3Serv, $q) {
	return {
		restrict: 'E',
		scope: {},
		link: function link(scope, element, attrs) {
			d3Serv.d3().then(function (d3) {

				var width = 1000;
				var height = 700;

				var svg = d3.select('#graph').append('svg').attr('width', width).attr('height', height);

				var projection = d3.geo.mercator().scale((width + 1) / 2 / Math.PI).translate([width / 2, height / 2]).precision(.1);

				var path = d3.geo.path().projection(projection);

				var worldMap = d3.map({});

				d3.json('world.json', function (err, world) {
					console.log(world.objects);
					var world = svg.append('g').attr('class', 'world').selectAll('g').data(topojson.feature(world, world.objects.subunits)).enter().append('g');

					world.append('path').attr('d', path);
					console.log('mapped');
					console.log(world.objects);
				});
			});
		}
	};
});
// function asynchLoad(jsonFile) {
// 	var deferred = $q.defer()
// 	deferred.resolve(d3.json, jsonFile)
// 	return deferred.promise;
// }

// var promise = asynchLoad('world.json')
// 	promise.then(function (err, world) {
// 		var world = svg.append('g')
// 			.attr('class', 'world')
// 			.selectAll('g')
// 			.data(topojson.feature(world, world.objects.states))
// 			.enter()
// 			.append("g")

// 		word.append('path')
// 			.attr('d', path);

// 		$scope.worlddata = world.objects
// 	})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9kaXJlY3RpdmVzL21hcC5kaXJlY3RpdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBRU4sTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7OztDQUdoQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQy9DLFVBQVMsU0FBUyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUU7QUFDbEMsS0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25CLFVBQVMsWUFBWSxHQUFHOztBQUV0QixZQUFVLENBQUMsTUFBTSxDQUFDLFlBQVc7QUFBRSxJQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUFFLENBQUMsQ0FBQztFQUN6RDs7OztBQUlELEtBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckQsVUFBUyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztBQUNuQyxVQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUN2QixVQUFTLENBQUMsR0FBRyxHQUFHLDhCQUE4QixDQUFDO0FBQy9DLFVBQVMsQ0FBQyxrQkFBa0IsR0FBRyxZQUFZO0FBQ3pDLE1BQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUUsWUFBWSxFQUFFLENBQUM7RUFDbkQsQ0FBQTtBQUNELFVBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDOztBQUVoQyxLQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsRUFBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFekIsUUFBTztBQUNMLElBQUUsRUFBRSxjQUFXO0FBQUUsVUFBTyxDQUFDLENBQUMsT0FBTyxDQUFDO0dBQUU7RUFDckMsQ0FBQztDQUNQLENBQUMsQ0FBQyxDQUFDOztBQUVKLE9BQU8sQ0FFTixNQUFNLENBQUMsT0FBTyxDQUFDLENBRWYsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLE1BQU0sRUFBRSxFQUFFLEVBQUU7QUFDdkMsUUFBTztBQUNOLFVBQVEsRUFBRSxHQUFHO0FBQ2IsT0FBSyxFQUFFLEVBQUU7QUFDVCxNQUFJLEVBQUUsY0FBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUNyQyxTQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVMsRUFBRSxFQUFFOztBQUU3QixRQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDakIsUUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDOztBQUVqQixRQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUN6QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQ2IsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FDcEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTs7QUFFMUIsUUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FDMUIsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQ2hDLFNBQVMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ2xDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTs7QUFFbEIsUUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FDcEIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBOztBQUUxQixRQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQ3JCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUM7QUFDMUMsWUFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDN0IsU0FBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDdEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FDdEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQ3JELEtBQUssRUFBRSxDQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFWixVQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUNsQixJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pCLFlBQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDdEIsWUFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDM0IsQ0FBQyxDQUFBO0lBRUYsQ0FBQyxDQUFBO0dBMEJMO0VBQ0QsQ0FBQTtDQUNELENBQUMsQ0FBQSIsImZpbGUiOiJzcmMvanMvZGlyZWN0aXZlcy9tYXAuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuXG4ubW9kdWxlKCdkMycsIFtdKVxuXG4vLy0gYXNzdXJlcyBkMyB3b3JrcyBvbmxvYWQgYW5kIGFzeW5jXG4uZmFjdG9yeSgnZDNTZXJ2JywgWyckZG9jdW1lbnQnLCAnJHEnLCAnJHJvb3RTY29wZScsXG4gICAgZnVuY3Rpb24oJGRvY3VtZW50LCAkcSwgJHJvb3RTY29wZSkge1xuICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgZnVuY3Rpb24gb25TY3JpcHRMb2FkKCkge1xuICAgICAgICAvLyBMb2FkIGNsaWVudCBpbiB0aGUgYnJvd3NlclxuICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsgZC5yZXNvbHZlKHdpbmRvdy5kMyk7IH0pO1xuICAgICAgfVxuICAgICAgLy8gQ3JlYXRlIGEgc2NyaXB0IHRhZyB3aXRoIGQzIGFzIHRoZSBzb3VyY2VcbiAgICAgIC8vIGFuZCBjYWxsIG91ciBvblNjcmlwdExvYWQgY2FsbGJhY2sgd2hlbiBpdFxuICAgICAgLy8gaGFzIGJlZW4gbG9hZGVkXG4gICAgICB2YXIgc2NyaXB0VGFnID0gJGRvY3VtZW50WzBdLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0VGFnLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgXG4gICAgICBzY3JpcHRUYWcuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0VGFnLnNyYyA9ICdodHRwOi8vZDNqcy5vcmcvZDMudjMubWluLmpzJztcbiAgICAgIHNjcmlwdFRhZy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykgb25TY3JpcHRMb2FkKCk7XG4gICAgICB9XG4gICAgICBzY3JpcHRUYWcub25sb2FkID0gb25TY3JpcHRMb2FkO1xuXG4gICAgICB2YXIgcyA9ICRkb2N1bWVudFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgcy5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkMzogZnVuY3Rpb24oKSB7IHJldHVybiBkLnByb21pc2U7IH1cbiAgICAgIH07XG59XSk7XG5cbmFuZ3VsYXJcblxuLm1vZHVsZSgnTWFwRDMnKVxuXG4uZGlyZWN0aXZlKCdtYXAnLCBmdW5jdGlvbiAoZDNTZXJ2LCAkcSkge1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiAnRScsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXHRcdFx0ZDNTZXJ2LmQzKCkudGhlbihmdW5jdGlvbihkMykge1xuXG5cdFx0XHRcdHZhciB3aWR0aCA9IDEwMDA7XG5cdFx0XHRcdHZhciBoZWlnaHQgPSA3MDA7XG5cblx0XHRcdFx0dmFyIHN2ZyA9IGQzLnNlbGVjdCgnI2dyYXBoJylcblx0XHRcdFx0XHRcdFx0LmFwcGVuZChcInN2Z1wiKVxuXHRcdFx0XHRcdFx0XHQuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHRcdFx0XHRcdFx0XHQuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG5cblx0XHRcdFx0dmFyIHByb2plY3Rpb24gPSBkMy5nZW8ubWVyY2F0b3IoKVxuXHRcdFx0XHQgICAgXHRcdFx0LnNjYWxlKCh3aWR0aCArIDEpIC8gMiAvIE1hdGguUEkpXG5cdCAgICBcdFx0XHRcdFx0XHQudHJhbnNsYXRlKFt3aWR0aCAvIDIsIGhlaWdodCAvIDJdKVxuXHQgICAgXHRcdFx0XHRcdFx0LnByZWNpc2lvbiguMSlcblxuXHQgICAgXHRcdHZhciBwYXRoID0gZDMuZ2VvLnBhdGgoKVxuXHQgICAgXHRcdFx0XHRcdC5wcm9qZWN0aW9uKHByb2plY3Rpb24pXG5cblx0ICAgIFx0XHR2YXIgd29ybGRNYXAgPSBkMy5tYXAoe1xuXHQgICAgXHRcdH0pO1xuXG5cdCAgICBcdFx0ZDMuanNvbignd29ybGQuanNvbicsIGZ1bmN0aW9uIChlcnIsIHdvcmxkKXtcblx0ICAgIFx0XHRcdGNvbnNvbGUubG9nKHdvcmxkLm9iamVjdHMpXG5cdFx0XHRcdFx0dmFyIHdvcmxkID0gc3ZnLmFwcGVuZCgnZycpXG5cdCAgICBcdFx0XHRcdC5hdHRyKCdjbGFzcycsICd3b3JsZCcpXG5cdCAgICBcdFx0XHRcdC5zZWxlY3RBbGwoJ2cnKVxuXHQgICAgXHRcdFx0XHQuZGF0YSh0b3BvanNvbi5mZWF0dXJlKHdvcmxkLCB3b3JsZC5vYmplY3RzLnN1YnVuaXRzKSlcblx0ICAgIFx0XHRcdFx0LmVudGVyKClcblx0ICAgIFx0XHRcdFx0LmFwcGVuZChcImdcIilcblxuXHRcdCAgICBcdFx0XHR3b3JsZC5hcHBlbmQoJ3BhdGgnKVxuXHRcdCAgICBcdFx0XHRcdC5hdHRyKCdkJywgcGF0aCk7XG5cdFx0ICAgIFx0XHRcdFx0Y29uc29sZS5sb2coJ21hcHBlZCcpXG5cdFx0ICAgIFx0XHRcdGNvbnNvbGUubG9nKHdvcmxkLm9iamVjdHMpXG5cdCAgICBcdFx0fSlcblxuXHQgICAgXHR9KVxuXG5cbiAgICBcdFx0Ly8gZnVuY3Rpb24gYXN5bmNoTG9hZChqc29uRmlsZSkge1xuICAgIFx0XHQvLyBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICBcdFx0Ly8gXHRkZWZlcnJlZC5yZXNvbHZlKGQzLmpzb24sIGpzb25GaWxlKVxuICAgIFx0XHQvLyBcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIFx0XHQvLyB9XG5cbiAgICBcdFx0Ly8gdmFyIHByb21pc2UgPSBhc3luY2hMb2FkKCd3b3JsZC5qc29uJylcbiAgICBcdFx0Ly8gXHRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGVyciwgd29ybGQpIHtcbiAgICBcdFx0Ly8gXHRcdHZhciB3b3JsZCA9IHN2Zy5hcHBlbmQoJ2cnKVxuXHQgICAgXHQvLyBcdFx0XHQuYXR0cignY2xhc3MnLCAnd29ybGQnKVxuXHQgICAgXHQvLyBcdFx0XHQuc2VsZWN0QWxsKCdnJylcblx0ICAgIFx0Ly8gXHRcdFx0LmRhdGEodG9wb2pzb24uZmVhdHVyZSh3b3JsZCwgd29ybGQub2JqZWN0cy5zdGF0ZXMpKVxuXHQgICAgXHQvLyBcdFx0XHQuZW50ZXIoKVxuXHQgICAgXHQvLyBcdFx0XHQuYXBwZW5kKFwiZ1wiKVxuXG5cdCAgICBcdC8vIFx0XHR3b3JkLmFwcGVuZCgncGF0aCcpXG5cdCAgICBcdC8vIFx0XHRcdC5hdHRyKCdkJywgcGF0aCk7XG5cblx0ICAgIFx0Ly8gXHRcdCRzY29wZS53b3JsZGRhdGEgPSB3b3JsZC5vYmplY3RzXG4gICAgXHRcdC8vIFx0fSlcblxuXG5cblx0XHR9IFxuXHR9XG59KSJdfQ==
